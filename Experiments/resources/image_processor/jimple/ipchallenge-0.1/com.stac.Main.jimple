public class com.stac.Main extends java.lang.Object
{
    private static java.nio.file.Path ccdir;
    private static com.stac.learning.ClusterController clusterController;

    public void <init>()
    {
        com.stac.Main this;

        this := @this: com.stac.Main;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    static void printHelp()
    {
        java.io.PrintStream $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r11;
        java.nio.file.Path $r9;
        java.lang.String $r10;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        $r1 = virtualinvoke $r0.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("Usage: \n");

        $r2 = virtualinvoke $r1.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("    Arguments: \n");

        $r3 = virtualinvoke $r2.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("       train <filename> <oldType>\n");

        $r4 = virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("          Adds this image to the training set.\n");

        $r5 = virtualinvoke $r4.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("       cluster <filename>\n");

        $r6 = virtualinvoke $r5.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("          Tests this file against the training set.\n");

        $r7 = virtualinvoke $r6.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("\n");

        $r8 = virtualinvoke $r7.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("    See ");

        $r9 = <com.stac.Main: java.nio.file.Path ccdir>;

        $r10 = interfaceinvoke $r9.<java.nio.file.Path: java.lang.String toString()>();

        $r11 = virtualinvoke $r8.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>($r10);

        virtualinvoke $r11.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("/config.cfg for algorithm order configuration.\n");

        return;
    }

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        java.lang.String[] args;
        int[] $r0;
        com.stac.Main$Command $r1;
        int $i0, $i1;
        java.lang.String $r2, $r3, $r4;
        boolean $z0, $z1, status;
        byte $b2;

        args := @parameter0: java.lang.String[];

        status = 1;

        $r0 = <com.stac.Main$2: int[] $SwitchMap$com$stac$Main$Command>;

        $r1 = staticinvoke <com.stac.Main: com.stac.Main$Command parseArgs(java.lang.String[])>(args);

        $i0 = virtualinvoke $r1.<com.stac.Main$Command: int ordinal()>();

        $i1 = $r0[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r4 = args[1];

        $r3 = args[2];

        $z1 = staticinvoke <com.stac.Main: boolean setTag(java.lang.String,java.lang.String)>($r4, $r3);

        if $z1 != 0 goto label4;

        status = 0;

        goto label4;

     label2:
        $r2 = args[1];

        $z0 = staticinvoke <com.stac.Main: boolean clusterAgainstTrainingSet(java.lang.String)>($r2);

        if $z0 != 0 goto label4;

        status = 0;

        goto label4;

     label3:
        staticinvoke <com.stac.Main: void printHelp()>();

        status = 0;

     label4:
        if status == 0 goto label5;

        $b2 = 0;

        goto label6;

     label5:
        $b2 = -1;

     label6:
        staticinvoke <java.lang.System: void exit(int)>($b2);

        return;
    }

    private static boolean clusterAgainstTrainingSet(java.lang.String) throws java.io.IOException
    {
        java.lang.String filename, oldType;
        java.lang.String[] nearestTypes, $r0, arr$;
        java.util.HashMap inCluster, $r5;
        int len$, $i0, $i1, $i2, i$;
        com.stac.learning.ClusterController $r1;
        java.nio.file.Path $r2;
        java.io.File $r3, $r4;
        java.util.LinkedList $r6, arr$;
        java.util.Set $r7;
        com.stac.Main$1 $r8;
        java.io.PrintStream $r9, $r10, $r11, $r12, $r17, $r24, $r25, $r26;
        java.lang.Object $r13, $r15, $r20;
        java.util.Map$Entry $r14;
        java.lang.CharSequence $r16;
        boolean $z0;
        java.lang.Integer $r18, $r21, $r22;

        filename := @parameter0: java.lang.String;

        $r1 = <com.stac.Main: com.stac.learning.ClusterController clusterController>;

        $r0 = newarray (java.lang.String)[0];

        $r2 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(filename, $r0);

        $r3 = interfaceinvoke $r2.<java.nio.file.Path: java.io.File toFile()>();

        $r4 = virtualinvoke $r3.<java.io.File: java.io.File getCanonicalFile()>();

        nearestTypes = virtualinvoke $r1.<com.stac.learning.ClusterController: java.lang.String[] cluster(java.io.File)>($r4);

        if nearestTypes != null goto label1;

        $r24 = <java.lang.System: java.io.PrintStream err>;

        $r25 = virtualinvoke $r24.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("Failed to classify ");

        $r26 = virtualinvoke $r25.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>(filename);

        virtualinvoke $r26.<java.io.PrintStream: void println()>();

        return 0;

     label1:
        $r5 = new java.util.HashMap;

        $i0 = lengthof nearestTypes;

        specialinvoke $r5.<java.util.HashMap: void <init>(int)>($i0);

        inCluster = $r5;

        arr$ = nearestTypes;

        len$ = lengthof arr$;

        i$ = 0;

     label2:
        if i$ >= len$ goto label4;

        oldType = arr$[i$];

        $z0 = virtualinvoke inCluster.<java.util.HashMap: boolean containsKey(java.lang.Object)>(oldType);

        if $z0 == 0 goto label3;

        $r20 = virtualinvoke inCluster.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(oldType);

        $r21 = (java.lang.Integer) $r20;

        $i1 = virtualinvoke $r21.<java.lang.Integer: int intValue()>();

        $i2 = $i1 + 1;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke inCluster.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(oldType, $r22);

     label3:
        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke inCluster.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(oldType, $r18);

        i$ = i$ + 1;

        goto label2;

     label4:
        $r6 = new java.util.LinkedList;

        $r7 = virtualinvoke inCluster.<java.util.HashMap: java.util.Set entrySet()>();

        specialinvoke $r6.<java.util.LinkedList: void <init>(java.util.Collection)>($r7);

        arr$ = $r6;

        $r8 = new com.stac.Main$1;

        specialinvoke $r8.<com.stac.Main$1: void <init>()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(arr$, $r8);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r10 = virtualinvoke $r9.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>("The image ");

        $r11 = virtualinvoke $r10.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>(filename);

        $r12 = virtualinvoke $r11.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>(" classifies as: ");

        $r13 = virtualinvoke arr$.<java.util.LinkedList: java.lang.Object getFirst()>();

        $r14 = (java.util.Map$Entry) $r13;

        $r15 = interfaceinvoke $r14.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = (java.lang.CharSequence) $r15;

        $r17 = virtualinvoke $r12.<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>($r16);

        virtualinvoke $r17.<java.io.PrintStream: void println()>();

        return 1;
    }

    private static boolean setTag(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String filename, tag, $r3, $r6, $r8, $r10;
        java.nio.file.Path path, $r1, $r7;
        com.stac.learning.ClusterController $r0, $r11;
        java.io.File $r2, $r5;
        java.lang.String[] $r4;
        boolean $z0, $z1;
        java.io.FileNotFoundException $r9;

        filename := @parameter0: java.lang.String;

        tag := @parameter1: java.lang.String;

        $r0 = <com.stac.Main: com.stac.learning.ClusterController clusterController>;

        $r1 = $r0.<com.stac.learning.ClusterController: java.nio.file.Path trainingImages>;

        $r2 = interfaceinvoke $r1.<java.nio.file.Path: java.io.File toFile()>();

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getCanonicalPath()>();

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = filename;

        path = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r3, $r4);

        $r5 = interfaceinvoke path.<java.nio.file.Path: java.io.File toFile()>();

        $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getCanonicalPath()>();

        $r7 = interfaceinvoke path.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        $r8 = interfaceinvoke $r7.<java.nio.file.Path: java.lang.String toString()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label1;

        $r11 = <com.stac.Main: com.stac.learning.ClusterController clusterController>;

        $z1 = virtualinvoke $r11.<com.stac.learning.ClusterController: boolean setTag(java.lang.String,java.lang.String)>(filename, tag);

        return $z1;

     label1:
        $r9 = new java.io.FileNotFoundException;

        $r10 = interfaceinvoke path.<java.nio.file.Path: java.lang.String toString()>();

        specialinvoke $r9.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    private static com.stac.Main$Command parseArgs(java.lang.String[])
    {
        java.lang.String[] args;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r0, $r1;
        boolean $z0, $z1;
        com.stac.Main$Command $r2, $r3, $r4;

        args := @parameter0: java.lang.String[];

        $i0 = lengthof args;

        if $i0 == 2 goto label1;

        $i3 = lengthof args;

        if $i3 != 3 goto label3;

     label1:
        $r0 = args[0];

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("train");

        if $z0 == 0 goto label2;

        $i2 = lengthof args;

        if $i2 != 3 goto label2;

        $r4 = <com.stac.Main$Command: com.stac.Main$Command TRAIN>;

        return $r4;

     label2:
        $r1 = args[0];

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("cluster");

        if $z1 == 0 goto label3;

        $i1 = lengthof args;

        if $i1 != 2 goto label3;

        $r3 = <com.stac.Main$Command: com.stac.Main$Command CLUSTER>;

        return $r3;

     label3:
        $r2 = <com.stac.Main$Command: com.stac.Main$Command NONE>;

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.String[] $r1;
        java.nio.file.Path $r2, $r4;
        com.stac.learning.ClusterController $r3;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = ".imageClustering";

        $r2 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r0, $r1);

        <com.stac.Main: java.nio.file.Path ccdir> = $r2;

        $r3 = new com.stac.learning.ClusterController;

        $r4 = <com.stac.Main: java.nio.file.Path ccdir>;

        specialinvoke $r3.<com.stac.learning.ClusterController: void <init>(java.nio.file.Path)>($r4);

        <com.stac.Main: com.stac.learning.ClusterController clusterController> = $r3;

        return;
    }
}
