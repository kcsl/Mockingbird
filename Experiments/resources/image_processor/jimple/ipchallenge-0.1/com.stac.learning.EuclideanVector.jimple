public class com.stac.learning.EuclideanVector extends com.stac.learning.Vector
{

    void <init>(int)
    {
        com.stac.learning.EuclideanVector this;
        int n;

        this := @this: com.stac.learning.EuclideanVector;

        n := @parameter0: int;

        specialinvoke this.<com.stac.learning.Vector: void <init>(int)>(n);

        return;
    }

    public float compareTo(com.stac.learning.Vector)
    {
        com.stac.learning.EuclideanVector this;
        com.stac.learning.Vector other;
        float[] $r0, $r2, $r4, $r5, $r6, $r9, $r12, $r13, $r14, $r15, $r16;
        int $i0, $i1, $i2, i;
        java.lang.Class $r7, $r8, $r10, $r11;
        boolean $z0;
        double $d0, $d1, $d2, sum;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        java.lang.IllegalArgumentException $r17, $r18;

        this := @this: com.stac.learning.EuclideanVector;

        other := @parameter0: com.stac.learning.Vector;

        $r0 = this.<com.stac.learning.EuclideanVector: float[] attributes>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r0);

        $r2 = other.<com.stac.learning.Vector: float[] attributes>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r4 = this.<com.stac.learning.EuclideanVector: float[] attributes>;

        $i1 = lengthof $r4;

        $r5 = other.<com.stac.learning.Vector: float[] attributes>;

        $i0 = lengthof $r5;

        if $i1 == $i0 goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Vector lengths do not match.");

        throw $r18;

     label1:
        $r6 = this.<com.stac.learning.EuclideanVector: float[] attributes>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.Class getComponentType()>();

        $r9 = other.<com.stac.learning.Vector: float[] attributes>;

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.Class getComponentType()>();

        $z0 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z0 != 0 goto label2;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Arrays must be of the same type.");

        throw $r17;

     label2:
        sum = 0.0;

        i = 0;

     label3:
        $r12 = this.<com.stac.learning.EuclideanVector: float[] attributes>;

        $i2 = lengthof $r12;

        if i >= $i2 goto label4;

        $r13 = this.<com.stac.learning.EuclideanVector: float[] attributes>;

        $f2 = $r13[i];

        $r14 = other.<com.stac.learning.Vector: float[] attributes>;

        $f1 = $r14[i];

        $f6 = $f2 - $f1;

        $r15 = this.<com.stac.learning.EuclideanVector: float[] attributes>;

        $f4 = $r15[i];

        $r16 = other.<com.stac.learning.Vector: float[] attributes>;

        $f3 = $r16[i];

        $f5 = $f4 - $f3;

        $f7 = $f6 * $f5;

        $d2 = (double) $f7;

        sum = sum + $d2;

        i = i + 1;

        goto label3;

     label4:
        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>(sum);

        $d1 = 1.0 - $d0;

        $f0 = (float) $d1;

        return $f0;
    }
}
