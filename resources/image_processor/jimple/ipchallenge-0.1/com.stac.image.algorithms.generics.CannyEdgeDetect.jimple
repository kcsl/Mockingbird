public class com.stac.image.algorithms.generics.CannyEdgeDetect extends java.lang.Object
{
    private static final java.awt.image.Kernel SobelV;
    private static final java.awt.image.Kernel SobelH;

    public void <init>()
    {
        com.stac.image.algorithms.generics.CannyEdgeDetect this;

        this := @this: com.stac.image.algorithms.generics.CannyEdgeDetect;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.awt.image.BufferedImage getSobelH(java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage image, $r1;
        java.awt.image.Kernel $r0;

        image := @parameter0: java.awt.image.BufferedImage;

        $r0 = <com.stac.image.algorithms.generics.CannyEdgeDetect: java.awt.image.Kernel SobelH>;

        $r1 = staticinvoke <com.stac.image.algorithms.generics.Convolve: java.awt.image.BufferedImage convolve(java.awt.image.BufferedImage,java.awt.image.Kernel)>(image, $r0);

        return $r1;
    }

    private static java.awt.image.BufferedImage getSobelV(java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage image, $r1;
        java.awt.image.Kernel $r0;

        image := @parameter0: java.awt.image.BufferedImage;

        $r0 = <com.stac.image.algorithms.generics.CannyEdgeDetect: java.awt.image.Kernel SobelV>;

        $r1 = staticinvoke <com.stac.image.algorithms.generics.Convolve: java.awt.image.BufferedImage convolve(java.awt.image.BufferedImage,java.awt.image.Kernel)>(image, $r0);

        return $r1;
    }

    private static java.awt.image.BufferedImage getAngles(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage Gx, Gy, angles, $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i, j, gx, gy, tan3pi8gx, tanpi8gx;
        com.stac.image.algorithms.generics.Direction $r1, $r2, $r3, $r4;
        short tanpi8gx;

        Gx := @parameter0: java.awt.image.BufferedImage;

        Gy := @parameter1: java.awt.image.BufferedImage;

        $r0 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke Gx.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke Gx.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 10);

        angles = $r0;

        i = 0;

     label1:
        $i2 = virtualinvoke Gx.<java.awt.image.BufferedImage: int getWidth()>();

        if i >= $i2 goto label9;

        j = 0;

     label2:
        $i3 = virtualinvoke Gx.<java.awt.image.BufferedImage: int getHeight()>();

        if j >= $i3 goto label8;

        $i4 = virtualinvoke Gx.<java.awt.image.BufferedImage: int getRGB(int,int)>(i, j);

        gx = staticinvoke <com.stac.image.utilities.ARGB: int rawB(int)>($i4);

        $i5 = virtualinvoke Gy.<java.awt.image.BufferedImage: int getRGB(int,int)>(i, j);

        gy = staticinvoke <com.stac.image.utilities.ARGB: int rawB(int)>($i5);

        tanpi8gx = 27146;

        tan3pi8gx = 158218;

        if gx == 0 goto label6;

        if gx >= 0 goto label3;

        gx = neg gx;

        gy = neg gy;

     label3:
        gy = gy << 16;

        tanpi8gx = tanpi8gx * gx;

        tan3pi8gx = tan3pi8gx * gx;

        $i7 = neg tan3pi8gx;

        if gy <= $i7 goto label4;

        $i11 = neg tanpi8gx;

        if gy >= $i11 goto label4;

        $r4 = <com.stac.image.algorithms.generics.Direction: com.stac.image.algorithms.generics.Direction UP45>;

        $i12 = virtualinvoke $r4.<com.stac.image.algorithms.generics.Direction: int ordinal()>();

        staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: void setExpandedValue(java.awt.image.BufferedImage,int,int,int)>(angles, i, j, $i12);

        goto label7;

     label4:
        $i8 = neg tanpi8gx;

        if gy <= $i8 goto label5;

        if gy >= tanpi8gx goto label5;

        $r3 = <com.stac.image.algorithms.generics.Direction: com.stac.image.algorithms.generics.Direction HORIZONTAL>;

        $i10 = virtualinvoke $r3.<com.stac.image.algorithms.generics.Direction: int ordinal()>();

        staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: void setExpandedValue(java.awt.image.BufferedImage,int,int,int)>(angles, i, j, $i10);

        goto label7;

     label5:
        if gy <= tanpi8gx goto label6;

        if gy >= tan3pi8gx goto label6;

        $r2 = <com.stac.image.algorithms.generics.Direction: com.stac.image.algorithms.generics.Direction DOWN45>;

        $i9 = virtualinvoke $r2.<com.stac.image.algorithms.generics.Direction: int ordinal()>();

        staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: void setExpandedValue(java.awt.image.BufferedImage,int,int,int)>(angles, i, j, $i9);

        goto label7;

     label6:
        $r1 = <com.stac.image.algorithms.generics.Direction: com.stac.image.algorithms.generics.Direction VERTICAL>;

        $i6 = virtualinvoke $r1.<com.stac.image.algorithms.generics.Direction: int ordinal()>();

        staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: void setExpandedValue(java.awt.image.BufferedImage,int,int,int)>(angles, i, j, $i6);

     label7:
        j = j + 1;

        goto label2;

     label8:
        i = i + 1;

        goto label1;

     label9:
        return angles;
    }

    private static void setExpandedValue(java.awt.image.BufferedImage, int, int, int)
    {
        java.awt.image.BufferedImage image;
        int i, j, value, $i0;

        image := @parameter0: java.awt.image.BufferedImage;

        i := @parameter1: int;

        j := @parameter2: int;

        value := @parameter3: int;

        $i0 = staticinvoke <com.stac.image.utilities.ARGB: int toARGB(int,int,int,int)>(255, value, value, value);

        virtualinvoke image.<java.awt.image.BufferedImage: void setRGB(int,int,int)>(i, j, $i0);

        return;
    }

    private static java.awt.image.BufferedImage getGradient(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage Gx, Gy, gradient, $r0;
        int gx, gy, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i, j;
        double $d0, $d1;

        Gx := @parameter0: java.awt.image.BufferedImage;

        Gy := @parameter1: java.awt.image.BufferedImage;

        $r0 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke Gx.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke Gx.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 10);

        gradient = $r0;

        i = 0;

     label1:
        $i2 = virtualinvoke Gx.<java.awt.image.BufferedImage: int getWidth()>();

        if i >= $i2 goto label4;

        j = 0;

     label2:
        $i3 = virtualinvoke Gx.<java.awt.image.BufferedImage: int getHeight()>();

        if j >= $i3 goto label3;

        $i4 = virtualinvoke Gx.<java.awt.image.BufferedImage: int getRGB(int,int)>(i, j);

        gx = staticinvoke <com.stac.image.utilities.ARGB: int rawB(int)>($i4);

        $i5 = virtualinvoke Gy.<java.awt.image.BufferedImage: int getRGB(int,int)>(i, j);

        gy = staticinvoke <com.stac.image.utilities.ARGB: int rawB(int)>($i5);

        $i7 = gy * gy;

        $i6 = gx * gx;

        $i8 = $i7 + $i6;

        $d0 = (double) $i8;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $i9 = (int) $d1;

        staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: void setExpandedValue(java.awt.image.BufferedImage,int,int,int)>(gradient, i, j, $i9);

        j = j + 1;

        goto label2;

     label3:
        i = i + 1;

        goto label1;

     label4:
        return gradient;
    }

    private static java.awt.image.BufferedImage nonMaxSupression(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage angles, gradient, nms, $r0;
        int[] magnitudes;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i, j;
        java.awt.image.WritableRaster $r1;
        com.stac.image.algorithms.generics.Direction $r2;

        angles := @parameter0: java.awt.image.BufferedImage;

        gradient := @parameter1: java.awt.image.BufferedImage;

        $r0 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke angles.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke angles.<java.awt.image.BufferedImage: int getHeight()>();

        $i2 = virtualinvoke angles.<java.awt.image.BufferedImage: int getType()>();

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, $i2);

        nms = $r0;

        $r1 = virtualinvoke gradient.<java.awt.image.BufferedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>(null);

        virtualinvoke nms.<java.awt.image.BufferedImage: void setData(java.awt.image.Raster)>($r1);

        i = 0;

     label1:
        $i3 = virtualinvoke angles.<java.awt.image.BufferedImage: int getWidth()>();

        if i >= $i3 goto label5;

        j = 0;

     label2:
        $i4 = virtualinvoke angles.<java.awt.image.BufferedImage: int getHeight()>();

        if j >= $i4 goto label4;

        $i5 = virtualinvoke angles.<java.awt.image.BufferedImage: int getRGB(int,int)>(i, j);

        $i6 = staticinvoke <com.stac.image.utilities.ARGB: int rawB(int)>($i5);

        $r2 = staticinvoke <com.stac.image.algorithms.generics.Direction: com.stac.image.algorithms.generics.Direction getDirection(int)>($i6);

        magnitudes = staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: int[] getMags(int,int,com.stac.image.algorithms.generics.Direction,java.awt.image.BufferedImage)>(i, j, $r2, gradient);

        $i9 = magnitudes[1];

        $i8 = magnitudes[0];

        $i7 = magnitudes[2];

        $i10 = staticinvoke <java.lang.Math: int max(int,int)>($i8, $i7);

        $i11 = staticinvoke <java.lang.Math: int max(int,int)>($i9, $i10);

        $i12 = magnitudes[1];

        if $i11 == $i12 goto label3;

        staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: void setExpandedValue(java.awt.image.BufferedImage,int,int,int)>(nms, i, j, 0);

     label3:
        j = j + 1;

        goto label2;

     label4:
        i = i + 1;

        goto label1;

     label5:
        return nms;
    }

    private static java.awt.image.BufferedImage hysteresisThresholding(java.awt.image.BufferedImage, int, int)
    {
        java.awt.image.BufferedImage input, nms, $r0;
        int min, max, m11, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i, j;
        java.awt.image.WritableRaster $r1;

        input := @parameter0: java.awt.image.BufferedImage;

        min := @parameter1: int;

        max := @parameter2: int;

        $r0 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke input.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke input.<java.awt.image.BufferedImage: int getHeight()>();

        $i2 = virtualinvoke input.<java.awt.image.BufferedImage: int getType()>();

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, $i2);

        nms = $r0;

        $r1 = virtualinvoke input.<java.awt.image.BufferedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>(null);

        virtualinvoke nms.<java.awt.image.BufferedImage: void setData(java.awt.image.Raster)>($r1);

        i = 0;

     label1:
        $i3 = virtualinvoke nms.<java.awt.image.BufferedImage: int getWidth()>();

        if i >= $i3 goto label6;

        j = 0;

     label2:
        $i4 = virtualinvoke nms.<java.awt.image.BufferedImage: int getHeight()>();

        if j >= $i4 goto label5;

        $i5 = virtualinvoke nms.<java.awt.image.BufferedImage: int getWidth()>();

        $i6 = staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: int bound(int,int,int)>(0, $i5, i);

        $i7 = virtualinvoke nms.<java.awt.image.BufferedImage: int getHeight()>();

        $i8 = staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: int bound(int,int,int)>(0, $i7, j);

        $i9 = virtualinvoke nms.<java.awt.image.BufferedImage: int getRGB(int,int)>($i6, $i8);

        m11 = staticinvoke <com.stac.image.utilities.ARGB: int rawB(int)>($i9);

        if m11 < max goto label3;

        $i11 = i - 1;

        $i10 = j - 1;

        staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: void hysterize(int,java.awt.image.BufferedImage,int,int)>(min, nms, $i11, $i10);

        $i12 = j - 1;

        staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: void hysterize(int,java.awt.image.BufferedImage,int,int)>(min, nms, i, $i12);

        $i14 = i + 1;

        $i13 = j - 1;

        staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: void hysterize(int,java.awt.image.BufferedImage,int,int)>(min, nms, $i14, $i13);

        $i15 = i - 1;

        staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: void hysterize(int,java.awt.image.BufferedImage,int,int)>(min, nms, $i15, j);

        staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: void hysterize(int,java.awt.image.BufferedImage,int,int)>(min, nms, i, j);

        $i16 = i + 1;

        staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: void hysterize(int,java.awt.image.BufferedImage,int,int)>(min, nms, $i16, j);

        $i18 = i - 1;

        $i17 = j + 1;

        staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: void hysterize(int,java.awt.image.BufferedImage,int,int)>(min, nms, $i18, $i17);

        $i19 = j + 1;

        staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: void hysterize(int,java.awt.image.BufferedImage,int,int)>(min, nms, i, $i19);

        $i21 = i + 1;

        $i20 = j + 1;

        staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: void hysterize(int,java.awt.image.BufferedImage,int,int)>(min, nms, $i21, $i20);

        goto label4;

     label3:
        if m11 >= min goto label4;

        staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: void setExpandedValue(java.awt.image.BufferedImage,int,int,int)>(nms, i, j, 0);

     label4:
        j = j + 1;

        goto label2;

     label5:
        i = i + 1;

        goto label1;

     label6:
        return nms;
    }

    private static void hysterize(int, java.awt.image.BufferedImage, int, int)
    {
        int min, $i0, $i1, $i2, $i3, i, j, i, j;
        java.awt.image.BufferedImage nms;

        min := @parameter0: int;

        nms := @parameter1: java.awt.image.BufferedImage;

        i := @parameter2: int;

        j := @parameter3: int;

        $i0 = virtualinvoke nms.<java.awt.image.BufferedImage: int getWidth()>();

        i = staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: int bound(int,int,int)>(0, $i0, i);

        $i1 = virtualinvoke nms.<java.awt.image.BufferedImage: int getHeight()>();

        j = staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: int bound(int,int,int)>(0, $i1, j);

        $i2 = virtualinvoke nms.<java.awt.image.BufferedImage: int getRGB(int,int)>(i, j);

        $i3 = staticinvoke <com.stac.image.utilities.ARGB: int rawB(int)>($i2);

        if $i3 <= min goto label1;

        staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: void setExpandedValue(java.awt.image.BufferedImage,int,int,int)>(nms, i, j, 255);

     label1:
        return;
    }

    private static int[] getMags(int, int, com.stac.image.algorithms.generics.Direction, java.awt.image.BufferedImage)
    {
        int i, j, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, bx, by, ax, ay;
        com.stac.image.algorithms.generics.Direction angle;
        java.awt.image.BufferedImage grad;
        int[] $r0, $r1;

        i := @parameter0: int;

        j := @parameter1: int;

        angle := @parameter2: com.stac.image.algorithms.generics.Direction;

        grad := @parameter3: java.awt.image.BufferedImage;

        bx = i;

        by = j;

        ax = i;

        ay = j;

        $r0 = <com.stac.image.algorithms.generics.CannyEdgeDetect$1: int[] $SwitchMap$com$stac$image$algorithms$generics$Direction>;

        $i0 = virtualinvoke angle.<com.stac.image.algorithms.generics.Direction: int ordinal()>();

        $i1 = $r0[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        bx = bx + -1;

        by = by + -1;

        ax = ax + 1;

        ay = ay + 1;

        goto label5;

     label2:
        bx = bx + -1;

        by = by + 1;

        ax = ax + 1;

        ay = ay + -1;

        goto label5;

     label3:
        by = by + -1;

        ay = ay + 1;

        goto label5;

     label4:
        bx = bx + -1;

        ax = ax + 1;

     label5:
        $i2 = virtualinvoke grad.<java.awt.image.BufferedImage: int getWidth()>();

        bx = staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: int bound(int,int,int)>(0, $i2, bx);

        $i3 = virtualinvoke grad.<java.awt.image.BufferedImage: int getHeight()>();

        by = staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: int bound(int,int,int)>(0, $i3, by);

        $i4 = virtualinvoke grad.<java.awt.image.BufferedImage: int getWidth()>();

        ax = staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: int bound(int,int,int)>(0, $i4, ax);

        $i5 = virtualinvoke grad.<java.awt.image.BufferedImage: int getHeight()>();

        ay = staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: int bound(int,int,int)>(0, $i5, ay);

        $r1 = newarray (int)[3];

        $i6 = virtualinvoke grad.<java.awt.image.BufferedImage: int getRGB(int,int)>(bx, by);

        $i7 = staticinvoke <com.stac.image.utilities.ARGB: int rawB(int)>($i6);

        $r1[0] = $i7;

        $i8 = virtualinvoke grad.<java.awt.image.BufferedImage: int getRGB(int,int)>(i, j);

        $i9 = staticinvoke <com.stac.image.utilities.ARGB: int rawB(int)>($i8);

        $r1[1] = $i9;

        $i10 = virtualinvoke grad.<java.awt.image.BufferedImage: int getRGB(int,int)>(ax, ay);

        $i11 = staticinvoke <com.stac.image.utilities.ARGB: int rawB(int)>($i10);

        $r1[2] = $i11;

        return $r1;
    }

    private static int bound(int, int, int)
    {
        int min, max, val;

        min := @parameter0: int;

        max := @parameter1: int;

        val := @parameter2: int;

        if val >= min goto label1;

        val = val + 1;

     label1:
        if val < max goto label2;

        val = val + -1;

     label2:
        return val;
    }

    public static java.awt.image.BufferedImage detect(java.awt.image.BufferedImage, int, int)
    {
        java.awt.image.BufferedImage image, blurred, grey, sobelH, sobelV, angle, grad, nms, output;
        int min, thresh;
        java.awt.image.Kernel $r0;

        image := @parameter0: java.awt.image.BufferedImage;

        min := @parameter1: int;

        thresh := @parameter2: int;

        $r0 = <com.stac.image.algorithms.generics.Convolve: java.awt.image.Kernel Gausian5x5>;

        blurred = staticinvoke <com.stac.image.algorithms.generics.Convolve: java.awt.image.BufferedImage convolve(java.awt.image.BufferedImage,java.awt.image.Kernel)>(image, $r0);

        grey = staticinvoke <com.stac.image.algorithms.generics.ConvertImage: java.awt.image.BufferedImage otherGray(java.awt.image.BufferedImage)>(blurred);

        sobelH = staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: java.awt.image.BufferedImage getSobelH(java.awt.image.BufferedImage)>(grey);

        sobelV = staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: java.awt.image.BufferedImage getSobelV(java.awt.image.BufferedImage)>(grey);

        angle = staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: java.awt.image.BufferedImage getAngles(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>(sobelH, sobelV);

        grad = staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: java.awt.image.BufferedImage getGradient(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>(sobelH, sobelV);

        nms = staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: java.awt.image.BufferedImage nonMaxSupression(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>(angle, grad);

        output = staticinvoke <com.stac.image.algorithms.generics.CannyEdgeDetect: java.awt.image.BufferedImage hysteresisThresholding(java.awt.image.BufferedImage,int,int)>(nms, min, thresh);

        return output;
    }

    static void <clinit>()
    {
        java.awt.image.Kernel $r0, $r2;
        float[] $r1, $r3;

        $r0 = new java.awt.image.Kernel;

        $r1 = newarray (float)[9];

        $r1[0] = 1.0F;

        $r1[1] = 2.0F;

        $r1[2] = 1.0F;

        $r1[3] = 0.0F;

        $r1[4] = 0.0F;

        $r1[5] = 0.0F;

        $r1[6] = -1.0F;

        $r1[7] = -2.0F;

        $r1[8] = -1.0F;

        specialinvoke $r0.<java.awt.image.Kernel: void <init>(int,int,float[])>(3, 3, $r1);

        <com.stac.image.algorithms.generics.CannyEdgeDetect: java.awt.image.Kernel SobelV> = $r0;

        $r2 = new java.awt.image.Kernel;

        $r3 = newarray (float)[9];

        $r3[0] = 1.0F;

        $r3[1] = 0.0F;

        $r3[2] = -1.0F;

        $r3[3] = 2.0F;

        $r3[4] = 0.0F;

        $r3[5] = -2.0F;

        $r3[6] = 1.0F;

        $r3[7] = 0.0F;

        $r3[8] = -1.0F;

        specialinvoke $r2.<java.awt.image.Kernel: void <init>(int,int,float[])>(3, 3, $r3);

        <com.stac.image.algorithms.generics.CannyEdgeDetect: java.awt.image.Kernel SobelH> = $r2;

        return;
    }
}
